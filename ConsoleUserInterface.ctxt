#BlueJ class context
comment0.params=
comment0.target=void\ begin()
comment0.text=This\ method\ provides\ instructions\ on\ how\ to\ interact\ with\n\ the\ program\ to\ the\ user,\ and\ also\ populates\ the\ Data\n\ class's\ arrays\ with\ dummy\ data\ if\ the\ user\ chooses\ to\ \n\ do\ so,\ so\ that\ he\ may\ test\ the\ program\ without\ having\ \n\ to\ create\ any\ customers/transactions\ himself.\n\ \n\ Since\ this\ is\ the\ root\ method\ of\ all\ the\ other\ methods\n\ it\ contains\ the\ error\ handling\ code\ which\ is\ applicable\n\ to\ all\ the\ classes'\ methods\ in\ this\ program.\n\ Even\ if\ one\ of\ the\ deepest\ methods\ has\ thrown\ an\ Exception\n\ it\ bubbles\ up\ to\ reach\ the\ error\ handling\ code\ in\ this\ method.\n\ This\ code\ provides\ padding\ to\ the\ error\ messages\ to\ ensure\ all\n\ errors\ appear\ uniformly\ to\ the\ user,\ wherever\ or\ whenever\ they\n\ are\ thrown.\n\ This\ method\ provides\ a\ menu\ with\ options\ to\:\n\ -->Work\ with\ predefined\ dummy\ data.\n\ \ \ \ i.e.\ The\ user\ can\ choose\ to\ preload\ the\ Data\ class's\ arrays\n\ \ \ \ \ \ \ \ \ with\ users\ and\ transactions\ predefined\ by\ the\ programmer\n\ \ \ \ \ \ \ \ \ which\ he\ can\ edit/modify/add\ to.\n\ -->\ Work\ with\ blank\ arrays.\n\ \n\ \ \ \ i.e.\ The\ user\ will\ be\ provided\ with\ completely\ blank\ arrays\n\ \ \ \ \ \ \ \ \ in\ the\ data\ class\ in\ which\ he\ can\ add\ data\ to.\n
comment1.params=
comment1.target=void\ stage1()
comment1.text=This\ is\ the\ main\ menu\ which\ allows\ the\ user\ to\ choose\ what\ he\ would\ like\n\ to\ use\ the\ program\ to\ do.\ It\ provides\ him\ with\ a\ menu\ based\ system,\n\ from\ which\ he\ can\ either\ choose\ to\n\ -->Create\ a\ new\ Customer.\n\ -->Create\ a\ new\ transaction.\n\ -->View/Edit\ existing\ customers.\n\ -->View/Edit\ existing\ transactions.\n\ -->End\ the\ program.\n\ \n\ In\ case\ an\ invalid\ input\ is\ provided\ it\ throws\ an\ error\ handling\ code\ which\ is\ \n\ handled\ by\ the\ Exception\ handling\ routines\ in\ the\ begin()\ method.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment10.params=
comment10.target=void\ prevPlace()
comment10.text=This\ is\ the\ second\ layer\ of\ error\ handling\ in\ the\ program\ and\n\ is\ of\ vital\ importance\ as\ it\ permits\ the\ user\ to\ not\ start\ over\n\ again\ but\ to\ continue\ WHERE\ HE\ LEFT\ off\ and\ the\ exception\ was\ thrown,\n\ thus\ saving\ his\ time\ and\ effort.\n\ It\ uses\ the\ position\ and\ state\ variables\ to\ recall\ the\ methods\ again\ \n\ with\ the\ same\ attributes\ as\ they\ were\ called\ when\ the\ error\ occurred.\n\ \n
comment11.params=value\ len\ pre
comment11.target=void\ formatter(java.lang.String,\ int,\ java.lang.String)
comment11.text=This\ method\ provides\ formatting\ for\ all\ text\ which\ is\ longer\ than\n\ the\ line's\ length\ in\ a\ way\ similar\ to\ the\ word\ wrap\ feature\ of\ notepad.\n\ It\ takes\ in\ three\ arguments\ which\ it\ uses\ to\ determine\ the\ style\ \n\ in\ which\ the\ formatting\ has\ to\ be\ applied.\n\ @param\ value\ The\ string\ to\ be\ run\ through\ the\ word-wrap\ engine.\n\ @param\ len\ \ \ The\ length\ of\ the\ line\ which\ is\ to\ be\ maintained.\n\ @param\ pre\ \ \ The\ number\ of\ spaces\ preceding\ the\ subsequent\ lines\ which\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ wrapped(indent\ level\ of\ the\ text).\n
comment12.params=c
comment12.target=void\ drawLine(char)
comment12.text=This\ method\ draws\ a\ line\ in\ an\ animated\ form,\ using\ customisable\ \n\ characters.\n\ This\ method\ is\ a\ personal\ idea\ of\ mine,\ created\ to\ improve\ the\ \n\ aesthetics\ of\ the\ program\ and\ a\ visual\ cue\ to\ the\ user\ when\ the\ \n\ data\ is\ being\ added/modified/deleted.\n\ \n\ @param\ c\ The\ character\ the\ line\ is\ to\ consist\ of.\n
comment13.params=
comment13.target=void\ exitProg()
comment13.text=This\ method\ is\ called\ when\ the\ program\ is\ needed\ to\ exit.\n\ It\ is\ either\ called\ when\ the\ user\ has\ finished\ his\ work\n\ and\ wishes\ to\ exit,\ or\ else\ when\ the\ user\ chooses\ to\ \n\ terminate\ the\ program\ when\ an\ error\ occurs.\n\ It\ deletes\ the\ data\ stored\ in\ RAM\ and\ the\ Data\ class\ and\ \n\ restarts\ the\ Java\ Virtual\ Machine.\n
comment2.params=
comment2.target=void\ newCust()
comment2.text=This\ method\ contains\ code\ for\ accepting\ input\ from\ the\ user\n\ through\ the\ console\ using\ the\ data\ recieved\ from\ the\ user\n\ to\ create\ a\ new\ object\ of\ the\ Customer\ class.\n\ The\ data\ taken\ in\ is\:\n\ -->Name\n\ -->Address\n\ -->Pin\ Code\n\ -->Telephone\ number.\n\ It\ uses\ the\ Customer\ class's\ Save()\ method\ to\ save\ the\ \n\ details\ of\ the\ customer\ into\ the\ Data\ class.\n\ \n\ In\ case\ an\ invalid\ input\ is\ provided\ it\ throws\ an\ error\ handling\ code\ which\ is\ \n\ handled\ by\ the\ Exception\ handling\ routines\ in\ the\ begin()\ method.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment3.params=
comment3.target=void\ newTrans()
comment3.text=This\ overloaded\ method\ acts\ as\ a\ bridge\ between\ Stage1()\ and\ newTrans(int).\n\ It\ uses\ the\ Customer\ class's\ searchCust()\ method\ to\ find\ the\n\ customer\ ID\ of\ the\ customer\ the\ user\ wants\ to\ create\ the\ \n\ transaction\ for\ and\ then\ passes\ this\ value\ on\ to\ the\ \n\ newTrans(int)\ method.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment4.params=custId
comment4.target=void\ newTrans(int)
comment4.text=This\ method\ contains\ code\ for\ accepting\ input\ from\ the\ user\n\ through\ the\ console\ using\ the\ data\ recieved\ from\ the\ user\n\ to\ create\ a\ new\ object\ of\ the\ Transaction\ class.\n\ It\ takes\ in\ the\ customer\ Id\ of\ the\ customer\ who\ is\ \n\ creating\ the\ transaction\ as\ a\ parameter.\n\ It\ takes\ in\ and\ stores\ the\ following\ details\ into\ the\ new\n\ object.\n\ -->The\ source\ location's\ Pin\ Code.\n\ -->The\ recipient's\ name.\n\ -->The\ recipient's\ address.\n\ -->The\ recipient's\ pin\ code.\n\ It\ then\ uses\ the\ objct's\ Save()\ method\ to\ save\ the\ details\n\ into\ the\ Data\ class's\ array.\n\ \n\ In\ case\ an\ invalid\ input\ is\ provided\ it\ throws\ an\ error\ handling\ code\ which\ is\ \n\ handled\ by\ the\ Exception\ handling\ routines\ in\ the\ begin()\ method.\n\ @param\ custId\ The\ customer\ ID\ of\ the\ customer,\ as\ saved\ in\ the\ Data\ class.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment5.params=
comment5.target=void\ custMenu()
comment5.text=This\ overloaded\ method\ prints\ out\ all\ the\ customers\ in\ a\ tabular\n\ form\ and\ gives\ the\ user\ a\ choce\ to\ edit/delete\ them,\ also\ gives\n\ the\ user\ the\ choice\ to\ create\ a\ new\ customer.\n\ The\ choices\ the\ user\ has\ got\ are\:\n\ -->Edit\ a\ customer.\n\ -->Search\ for\ a\ customer\ by\ a\ detail\ of\ his.\n\ -->Delete\ a\ customer.\n\ -->Create\ a\ new\ cutsomer.\n\ \n\ In\ case\ an\ invalid\ input\ is\ provided\ it\ throws\ an\ error\ handling\ code\ which\ is\ \n\ handled\ by\ the\ Exception\ handling\ routines\ in\ the\ begin()\ method.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment6.params=custId
comment6.target=void\ custMenu(int)
comment6.text=Prints\ out\ the\ customer's\ details\ and\ gives\ the\ user\ a\ choce\ to\ edit/delete\ the\ \n\ customer\ and\ view\ his\ transactions,\ also\ gives\ the\ user\ a\n\ choice\ to\ create\ a\ new\ transaction\ for\ the\ customer.\n\ The\ choices\ the\ user\ has\ got\ are\:\n\ -->EDIT\ a\ customer.\n\ -->SEARCH\ for\ a\ customer\ by\ a\ detail\ of\ his.\n\ -->DELETE\ a\ customer.\n\ -->CREATE\ a\ new\ transaction\ for\ the\ customer.\n\ -->VIEW\ the\ customer's\ transactions.\n\ \n\ In\ case\ an\ invalid\ input\ is\ provided\ it\ throws\ an\ error\ handling\ code\ which\ is\ \n\ handled\ by\ the\ Exception\ handling\ routines\ in\ the\ begin()\ method.\n\ \n\ @param\ custId\ The\ customer\ ID\ of\ the\ customer,\ as\ saved\ in\ the\ Data\ class.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment7.params=transId
comment7.target=void\ transMenu(int)
comment7.text=This\ method\ provides\ the\ user\ with\ options\ to\ modify\ the\ \n\ transacation\ he\ has\ selected.\ \n\ The\ options\ availiable\ to\ the\ user\ are\:\n\ -->To\ edit\ the\ transaction.\n\ -->To\ delete\ the\ transaction.\n\ -->To\ add\ another\ transaction\ for\ the\ same\ user.\n\ -->Make\ the\ transaction\ as\ delivered.\n\ -->Print\ a\ bill\ for\ that\ transaction.\n\ -->End\ the\ program.\n\ -->Return\ to\ the\ previous\ menu.\n\ As\ with\ all\ the\ other\ methods,\ any\ exception\ occurring\ is\ \n\ thrown\ to\ the\ stage1()\ method\ where\ it\ is\ handled.\ \n\ \n\ @param\ transId\ The\ transaction\ ID\ of\ the\ transaction\ the\ customer\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selected.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment8.params=
comment8.target=void\ transSelector()
comment8.text=Provides\ a\ system\ for\ choosing\ a\ transaction\ to\ edit/modify,\n\ allows\ the\ user\ to\ choose\ the\ customer\ in\ an\ intutive\ and\n\ friendly\ way.\n\ The\ steps\ followed\ are\:\n\ -->The\ user\ chooses\ the\ customer\ who\ created\ the\ transaction,\n\ through\ any\ of\ the\ customers\ details\ using\ the\ searchCust()\ method\n\ of\ the\ Customer\ class.\n\ -->This\ method\ calls\ the\ Transaction\ class's\ view(int)\ method\ to\ \n\ display\ a\ table\ containing\ all\ of\ that\ customer's\ transactions.\n\ -->The\ customer\ has\ to\ refer\ to\ the\ table\ and\ choose\ the\ transaction\n\ he\ wishes\ to\ edit.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n
comment9.params=
comment9.target=boolean\ shouldContinue()
comment9.text=This\ is\ the\ first\ layer\ of\ the\ specialised\ error\ handling\n\ mechanism\ in\ the\ program.\ Instead\ of\ forcing\ the\ user\ to\ start\ afresh\ \n\ when\ an\ exception\ occurs,\ this\ method\ gives\ him\ a\ choice\ if\ he\ wants\n\ to\ resume\ from\ where\ he\ left\ off\ when\ the\ error\ occurred\ or\ to\ end\ the\ \n\ program.\n\ In\ case\ the\ user\ decided\ to\ continue,\ the\ second\ phase\ of\ error\ handling\n\ would\ be\ invoked,\ else,\ the\ exitProg()\ method\ would\ be\ executed,\ which\ \n\ would\ end\ the\ program\ execution\ and\ reset\ the\ Java\ virtual\ machine.\n\ It\ has\ a\ nested\ call\ system,\ thus,\ in\ case\ the\ user\ enters\ a\ wrong\n\ input\ even\ to\ the\ question\ if\ the\ program\ should\ continue,\ it\ \n\ re-issues\ the\ question,\ and\ one\ 'y'(yes)\ input\ causes\ it\ to\ fall\ through\n\ all\ the\ calls\ and\ return\ a\ true\ value.\n\ \n\ @throws\ Any\ exception\ that\ reaches\ it\ from\ the\ methods\ it\ calls\n\ \ \ \ \ \ \ \ \ or\ Exceptions\ which\ its\ code\ throws.\n\ \ \ \ \ \ \ \ \ \n\ \ @return\ shouldContinue\ The\ choice\ of\ the\ user.\n
numComments=14
